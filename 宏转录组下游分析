#在完成前序步骤获得annotation表后，使用R进行后续分析
#在KEGG官网下载BRITE功能映射表
#ko号对应Pathway，Pathway对应Metabolism层级

#设置工作路径
setwd("/workflowfile")

#读取已经获取的表格，第一列为ko号，而后的每一列是样本
data <- read.csv("ko_merged_split.csv", stringsAsFactors = FALSE)

#读取映射表
brite_lines <- readLines("br_ko00001.txt")

#初始化映射表
metabolism_map <- data.frame(
  KO = character(),
  Level1 = character(),
  Level2 = character(),
  Pathway = character(),
  stringsAsFactors = FALSE
)

# 临时变量，用于跟踪当前 Level1, Level2 和 Pathway
current_level1 <- ""
current_level2 <- ""
current_pathway <- ""

# 解析文件
for (line in brite_lines) {
  # 跳过空行、注释行或标题行
  if (grepl("^#|^!", line) || nchar(trimws(line)) == 0) next
  
  # A 级：顶层（Metabolism），可以忽略
  if (grepl("^A", line)) {
    next
  }
  # B 级：主要代谢类别（Level 1）
  else if (grepl("^B\\s+", line)) {
    current_level1 <- trimws(sub("^B\\s+", "", line))
  }
  # C 级：子类别（Level 2），可能包含途径编号
  else if (grepl("^C\\s+", line)) {
    current_level2 <- trimws(sub("^C\\s+\\d+\\s+(.*)", "\\1", line))
    # 提取途径编号（如果存在）
    if (grepl("\\[PATH:ko\\d+\\]", line)) {
      pathway_id <- trimws(sub(".*\\[PATH:ko(\\d+)\\].*", "\\1", line))
      current_pathway <- paste0("map", pathway_id)
    } else {
      current_pathway <- NA_character_
    }
  }
  # D 级：KO 编号
  else if (grepl("^D\\s+", line)) {
    # 提取 KO 编号（如 K00844）
    if (grepl("K\\d{5}", line)) {
      ko_id <- trimws(sub("^D\\s+(K\\d{5}).*", "\\1", line))
      if (nchar(ko_id) > 0) {
        metabolism_map <- rbind(metabolism_map, data.frame(
          KO = ko_id,
          Level1 = current_level1,
          Level2 = current_level2,
          Pathway = current_pathway,
          stringsAsFactors = FALSE
        ))
      }
    }
  }
}

# 检查是否成功解析
if (nrow(metabolism_map) == 0) {
  stop("Failed to parse ko00001.txt. Please check the file format.")
}

# 保存映射表
write.csv(metabolism_map, "metabolism_map_ko.csv", row.names = FALSE)


#####################################################################################

# 读取映射表
metabolism_map <- read.csv("metabolism_map_ko.csv", stringsAsFactors = FALSE)

# 函数：将 KO 编号映射到代谢类别
map_to_metabolism <- function(ko) {
  if (is.na(ko)) return(list(Level1 = NA, Level2 = NA, Pathway = NA))
  
  # 查找 KO 编号对应的代谢类别
  matches <- metabolism_map[metabolism_map$KO == ko, ]
  if (nrow(matches) == 0) return(list(Level1 = "Other", Level2 = "Other", Pathway = NA))
  
  # 可能有多个匹配（一个 KO 可能属于多个途径），取第一个
  level1 <- unique(matches$Level1)
  level1_result <- paste(level1, collapse = "; ")
  
  level2 <- unique(matches$Level2)
  level2_result <- paste(level2, collapse = "; ")
  
  pathway <- unique(matches$Pathway[!is.na(matches$Pathway)])
  pathway_result <- if (length(pathway) == 0) NA_character_ else paste(pathway, collapse = "; ")
  
  return(list(Level1 = level1_result, Level2 = level2_result, Pathway = pathway_result))
}

# 映射 Metabolism
metabolism_results <- lapply(data$KO, map_to_metabolism)
data$Metabolism_Level1 <- sapply(metabolism_results, function(x) x$Level1)
data$Metabolism_Level2 <- sapply(metabolism_results, function(x) x$Level2)
data$Pathways <- sapply(metabolism_results, function(x) x$Pathway)

# 保存结果
write.csv(data, "output_with_metabolism_levels.csv", row.names = FALSE)

# 查看分布
table(data$Metabolism_Level1, useNA = "always")
table(data$Metabolism_Level2, useNA = "always")





